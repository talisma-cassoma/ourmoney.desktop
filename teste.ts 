eu quero criar um app nextjs(com typscrist e rodando em docker) com um prisma e sqlite, se trata de um app web permite o usuario selecionar um ou varios ficheiros json
, processar dados e registar numa base de dados local sqlite aqui esta o meu codigo para processamento dos dados com node streams

import { createGunzip } from 'node:zlib';
import axios from 'axios';
import { parser } from 'stream-json/Parser';
import { streamArray } from 'stream-json/streamers/StreamArray';
import { pick } from 'stream-json/filters/Pick';
import { batch } from 'stream-json/utils/Batch';
import { chain } from 'stream-chain';
import { type Readable } from 'node:stream';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient()

const downloadUrl =  # get from the fronend selection 

interface Transaction {
i   d: string | null;
    description: string | null;
    type: string | null;
    category: string | null;
    price: number | null;
    owner: string | null;
    email: string | null;
    synced": boolean | null;
    createdAt: string | null;
}

interface StreamTransaction {
  key: number
  value: Transaction
}

async function saveTransactionsToDatabase(Transactions: StreamTransaction[]) {
  try {
    await prisma.transaction.createMany({
      data: Transactions.map(transaction => {
        return {
          company_id: '30',
          code: String(transaction.value.referencenumber),
        }
      }),
      skipDuplicates: true,
    })

    console.log(`Inserted ${Transactions.length} Transactions.`)
  } catch (err) {
    console.error(err)
  }
}

function consumeTransactionsStream(stream: Readable) {
  const unzip = createGunzip()

  const pipeline = chain([
    stream,
    unzip,
    parser(),
    pick({ filter: "source.transaction" }),
    streamArray(),
    batch({ batchSize: 500 })
  ])

  pipeline
    .on('data', (data: StreamJob[]) => {
      saveTransactionsToDatabase(data)
    })
    .on('error', (err: any) => {
      console.error('An error occurred:', err);
    })
    .on('end', () => {
      const memoryUsage = process.memoryUsage();
      const memoryUsageInMB = {
          rss: (memoryUsage.rss / 1024 / 1024).toFixed(2),
          heapTotal: (memoryUsage.heapTotal / 1024 / 1024).toFixed(2),
          heapUsed: (memoryUsage.heapUsed / 1024 / 1024).toFixed(2),
          external: (memoryUsage.external / 1024 / 1024).toFixed(2),
      };

      console.log(memoryUsageInMB);
    });
}

axios.get(downloadUrl, { responseType: 'stream' })
  .then(response => consumeTransactionsStream(response.data))

o frontend deve ser bem simples, um um input centralizado que permite o usuario selecionar ficheiros json