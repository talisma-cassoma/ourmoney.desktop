---
title: "Our Money Report"
author: "Talisma Manuel"
date: today
date-format: report of DD MMMM, YYYY
format:
  pdf:
    typst:
        font-paths: ["fonts"]
        format: custom.typ
        margin:
          left: 1cm
          rest: 0.5cm
    # color-links: true
    page-layout: full
    toc: true
    # toc-depth: 2
    include-in-header:
        text: |
           \usepackage{etoolbox}
           \pretocmd{\tableofcontents}{\clearpage}{}{}
           \apptocmd{\tableofcontents}{\clearpage}{}{}
    # number-sections: true
    keep-tex: true
    papersize: a4
    fontsize: 8pt
echo: false
error: false
warning: false
engine: jupyter
jupyter: python3
kernel: env
---

```{python}
from dateutil.relativedelta import relativedelta
from scipy.interpolate import make_interp_spline
from IPython.display import display, Markdown
from datetime import datetime, timedelta
import matplotlib.dates as mdates
import matplotlib.pyplot as plt
import seaborn as sns 
import pandas as pd
import numpy as np
import calendar

#set the font
plt.rcParams["font.family"] = "Open Sans"

# Load and prepare the data
df = pd.read_excel("transactions.xlsx")
df['category'] = df['category'].str.lower().str.strip()
df['createdAt'] = pd.to_datetime(df['createdAt'], format='%d-%m-%Y')

def show(df):
    styled = (
        df.style
        .format(precision=2)
        .hide(axis='index')
        .set_table_styles([
            {'selector': 'thead',
             'props': 'background-color: #0077b6; color: white; font-weight: bold; padding: 6px;'}
        ])
        .set_table_attributes('style="border-collapse: collapse; border: 1px solid black; font-size: 14px;"')
    )
    return display(styled)


# Current date and month
now = datetime.now()
first_day_of_month = datetime(now.year, now.month, 1)

# Current month outcome transactions
current_month_outcomes = df[
    (df['type'] == 'outcome') &
    (df['createdAt'].dt.month == now.month) &
    (df['createdAt'].dt.year == now.year)
]

# Biggest expense category this month
category_sum = current_month_outcomes.groupby('category')['price'].sum()
if not category_sum.empty:
    biggest_category = category_sum.idxmax()
    biggest_value = category_sum.max()
    total_current_month = category_sum.sum()
    other = total_current_month - biggest_value
else:
    biggest_category = None
    biggest_value = 0
    total_current_month = 0
    other = 0

# Outcome in the last 6 months
six_months_ago = now - timedelta(days=180)
last_six_months_outcomes = df[
    (df['type'] == 'outcome') & 
    (df['createdAt'] >= six_months_ago)
]
total_last_six_months = last_six_months_outcomes['price'].sum()

# High expenses this month (> 1000)
high_expenses = category_sum[category_sum > 1000].reset_index()
high_expenses.columns = ['Categoria', 'Total']
```

## Gestao dos Gastos

:::: {layout-ncol="2"}
### Onde estou gastando mais dinheiro?

```{python}
if biggest_category:
    labels = [biggest_category, 'Outros']
    sizes = [biggest_value, other]
    colors = ['#0077b6', '#90e0ef']

    fig, ax = plt.subplots(figsize=(4, 4)) # Adjust figsize here (width, height in inches)
    ax.pie(sizes, labels=labels, colors=colors, startangle=90, autopct='%1.1f%%')
    ax.set_title(f"Maior despesa de {now.strftime('%B/%Y')}")
    plt.axis('equal')
    plt.show()
else:
   display("Nenhuma despesa registrada para o mês atual.")
```

<div>

### Quanto gastei no total nos ultimos meses?

```{python}
display(Markdown(f"Neste mês: **{total_current_month:,.2f}**"))

display(Markdown(f"Nos últimos 6 meses **{total_last_six_months:,.2f}**"))
```

### Quais foram minhas maiores despesas esse mes?

Categorias com gasto acima de 1000:

```{python}
if not high_expenses.empty:
   # Mostrar o DataFrame com as categorias e valores
   high_expenses
   show(high_expenses)
else:
    display("Nenhuma categoria ultrapassou 1000 este mês.")

if biggest_category:
    display(Markdown(f"O maior gasto este mês foi em: **{biggest_category}** com **{biggest_value:,.2f}**"))
```

</div>
::::

::::: {layout-ncol="2"}
### Existem despesas recorrentes nos trimeste / simestre ?

```{python}
# Definir as datas de corte
three_months_ago = now - relativedelta(months=3)
six_months_ago = now - relativedelta(months=6)

# Filtrar gastos (outcome) para os períodos
outcomes_3m = df[(df['type'] == 'outcome') & (df['createdAt'] >= three_months_ago)]
outcomes_6m = df[(df['type'] == 'outcome') & (df['createdAt'] >= six_months_ago)]

# Agrupar e calcular total e % para os últimos 3 meses
category_3m = outcomes_3m.groupby('category')['price'].sum().reset_index()
category_3m['%'] = (category_3m['price'] / category_3m['price'].sum()) * 100
category_3m = category_3m.rename(columns={'price': 'Total', '%': 'Percentual (%)'})
category_3m = category_3m.sort_values(by='Total', ascending=False)

# Agrupar e calcular total e % para os últimos 6 meses
category_6m = outcomes_6m.groupby('category')['price'].sum().reset_index()
category_6m['%'] = (category_6m['price'] / category_6m['price'].sum()) * 100
category_6m = category_6m.rename(columns={'price': 'Total', '%': 'Percentual (%)'})
category_6m = category_6m.sort_values(by='Total', ascending=False)
```

ultimo trimeste

</div>

<div>

```{python}
if not category_3m.empty:
    show(category_3m)
else:
    display("Nenhuma despesa registrada nos últimos 3 meses.")
```

</div>

<div>

ultimo semestre

```{python}
if not category_6m.empty:
    show(category_6m)
else:
    display("Nenhuma despesa registrada nos últimos 6 meses.")
```

</div>

</div>
:::::

### Meu padrao de gasto mudou comprado ao meses anteriores ?

```{python}
np.random.seed(42)
# Filtrar apenas despesas (Original variable name)
df_outcome = df[df['type'] == 'outcome'].copy()

months = [(now - relativedelta(months=i)) for i in range(2, -1, -1)] 
recent_outcomes = df_outcome[df_outcome['createdAt'].dt.month.isin([m.month for m in months]) &
                             df_outcome['createdAt'].dt.year.isin([m.year for m in months])] # Added year check
categories = recent_outcomes['category'].unique().tolist()

# Dados mensais (Original variable name)
monthly_data = {}

# Check if there are categories before proceeding
if categories:
    for m in months:
        label = f"{calendar.month_name[m.month]}/{m.year}"
        monthly_df = df_outcome[(df_outcome['createdAt'].dt.month == m.month) &
                                (df_outcome['createdAt'].dt.year == m.year)]
        # Group and reindex to ensure all categories are present for each month
        grouped = monthly_df.groupby('category')['price'].sum().reindex(categories, fill_value=0)
        monthly_data[label] = grouped.tolist()
else:
    print("No outcome categories found in the specified period.")
    monthly_data = {} # Ensure monthly_data is empty if no categories

def plot_radar(ax, data, title, categories):
    # Note: 'data' here is the list of values for THIS specific plot (month)
    # 'categories' is the list of ALL potential category names
    labels = np.array(categories)
    num_vars = len(labels)

    angles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()

    plot_values = np.array(data + data[:1])
    plot_angles = angles + angles[:1]

    ax.plot(plot_angles, plot_values, 'o-', linewidth=2)
    ax.fill(plot_angles, plot_values, alpha=0.25)

    # Remove circular grid lines and labels
    ax.set_yticklabels([])
    ax.yaxis.grid(False)

    # Remove the outer circular spine
    ax.spines['polar'].set_visible(False)

    visible_labels = []
    threshold = 200 # o menor numero a ser considerado
    for i in range(num_vars):
        # Check the value in the *original data list* for this category
        if data[i] > threshold:
            visible_labels.append(labels[i]) # Keep the original label
        else:
            visible_labels.append("") # Use an empty string to hide the label

    # Set category ticks and the selectively visible labels
    ax.set_xticks(angles) # Set tick positions based on original angles
    ax.set_xticklabels(visible_labels) # Apply the filtered labels

    ax.set_title(title, size=12, y=1.1)

# --- Plotting the graphs side-by-side ---
if monthly_data and categories:
    num_plots = len(monthly_data)

    # Using the smaller figsize from the previous example
    fig, axes = plt.subplots(figsize=(12, 4), nrows=1, ncols=num_plots,
                             subplot_kw=dict(polar=True))

    if num_plots == 1:
        axes = [axes]

    plot_index = 0
    for label, data in monthly_data.items():
        if plot_index < len(axes):
            # Pass the specific month's 'data' and the full 'categories' list
            plot_radar(axes[plot_index], data, f"Gastos por categoria - {label}", categories)
            plot_index += 1

    plt.tight_layout(pad=1.5)
    plt.show()
elif not categories:
     display("Skipping plotting as no categories were found.")
else: # No monthly data was generated
     display("Skipping plotting as no monthly data was generated.")
```



### Como meus gastos em evoluíram ao longo do tempo?

```{python}
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import seaborn as sns

def formatar_valor_compacto(valor):
    """Formata número como 1.2K, 3.5M etc."""
    if abs(valor) >= 1_000_000_000:
        return f'{valor / 1_000_000_000:.1f}B'
    elif abs(valor) >= 1_000_000:
        return f'{valor / 1_000_000:.1f}M'
    elif abs(valor) >= 1_000:
        return f'{valor / 1_000:.1f}K'
    else:
        return f'{valor:.0f}'

def plot_categoria(categoria, dados, cor, figsize=(6, 2.5)):
    """Plota um gráfico individual para uma única categoria com valores compactos."""
    dados = dados.sort_values('month')
    x = dados['month']
    y = dados['price']

    fig, ax = plt.subplots(figsize=figsize)

    ax.plot(x, y, color=cor, linewidth=1, marker='o', markersize=2, linestyle='--')

    # Adiciona os valores em cada ponto
    for xi, yi in zip(x, y):
        ax.annotate(formatar_valor_compacto(yi),
                    xy=(xi, yi), xytext=(0, 5), textcoords='offset points',
                    ha='center', fontsize=6, color=cor)

    ax.set_title(f'Gastos: {categoria.capitalize()}', size=8)
    ax.set_ylim(bottom=0, top=ax.get_ylim()[1] * 1.1)
    
    ax.xaxis.set_major_locator(mdates.MonthLocator(interval=1))
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%b-%Y'))
    ax.tick_params(axis='x', rotation=45, labelsize=6)
    ax.tick_params(axis='y', labelsize=6) 

    # Estética
    ax.spines[['top', 'right', 'left', 'bottom']].set_visible(False)
    ax.tick_params(axis='y', left=False)
    ax.grid(True, axis='y')

    plt.tight_layout()
    plt.show()

# --------------------------------------------------
# Pré-processamento dos dados
# --------------------------------------------------
categorias_interesse = ['alimentaçao', 'gastos extra', 'roupas', 'bebida', 
                        'agua e luz', 'emprestimo', 'divida', 'saude']

df['category'] = df['category'].str.strip().str.lower()

df_filtered = df[
    (df['type'] == 'outcome') &
    (df['category'].isin(categorias_interesse))
].copy()

df_filtered['month'] = df_filtered['createdAt'].dt.to_period('M').dt.to_timestamp()
monthly_totals = df_filtered.groupby(['month', 'category'])['price'].sum().reset_index()

# Paleta de cores para categorias
palette = sns.color_palette("tab10", n_colors=len(categorias_interesse))
category_colors = dict(zip(categorias_interesse, palette))

# --------------------------------------------------
# Loop de categorias — um gráfico por vez
# --------------------------------------------------
for cat in categorias_interesse:
    dados = monthly_totals[monthly_totals['category'] == cat]
    plot_categoria(cat, dados, category_colors[cat])

```




## Receitas

### Quais são minhas principais fontes de receita?

```{python}
# Filtrar receitas
df_income = df[df['type'] == 'income'].copy()

# Agrupar por categoria
income_grouped = df_income.groupby('category')['price'].sum().sort_values(ascending=False).reset_index()

# Calcular porcentagem
income_grouped['percent'] = (income_grouped['price'] / income_grouped['price'].sum()) * 100

# Renomear colunas para exibir melhor
income_grouped.columns = ['Categoria', 'Total ', 'Porcentagem (%)']

# Arredondar valores
income_grouped['Total'] = income_grouped['Total '].round(2)
income_grouped['Porcentagem (%)'] = income_grouped['Porcentagem (%)'].round(1)

# Exibir tabela
show(income_grouped)
```

### Minha receita total aumentou ou diminuiu nos últimos meses?

```{python}
# Filtrar receitas
df_income = df[df['type'] == 'income'].copy()

# Agrupar por mês
df_income['month'] = df_income['createdAt'].dt.to_period('M').dt.to_timestamp()
monthly_income = df_income.groupby('month')['price'].sum().reset_index()

# Plot
plt.figure(figsize=(10, 4))

# Barras
plt.bar(monthly_income['month'], monthly_income['price'], 
        label='Receita Mensal', width=20, alpha=0.7, color='#90e0ef')

# Linha de tendência
plt.plot(monthly_income['month'], monthly_income['price'], 
         color='#0077b6', marker='o', linestyle='-', linewidth=1, label='Tendência')

# Eixos e título
plt.xlabel('Mês')
plt.ylabel('Receita Total ')
plt.title('Evolução da Receita Mensal')
plt.xticks(rotation=45, ha='right')
plt.legend()
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Formatando datas no eixo X
ax = plt.gca()
# Remove borders (spines)
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['left'].set_visible(False) # Keep bottom spine for reference, or remove if desired
ax.spines['bottom'].set_visible(False) # Remove bottom spine as 
ax.xaxis.set_major_locator(mdates.MonthLocator(interval=1))
ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))

plt.tight_layout()
plt.show() 
```

## Orçamento e Metas

```{python}
# Definir orçamento mensal por categoria
budget = {
    'alimentaçao': 3000,
    'roupas': 200,
    'bebida': 200,
    'agua e luz': 100,
    # 'emprestimos': 0,
    'dividas': 0,
    'saude': 500
}
```

::: {layout-ncol="2"}
### Em quais categorias de orçamento estou estourando o limite com mais frequência?

```{python}
# Filtrar apenas os dados de despesas (type='outcome')
df_outcome = df[df['type'] == 'outcome'].copy()

# Adicionar uma coluna para o mês e ano
df_outcome['month_year'] = df_outcome['createdAt'].dt.to_period('M')

# Agrupar os dados por mês e categoria, somando os valores
monthly_expenses = df_outcome.groupby(['month_year', 'category'])['price'].sum().reset_index()

# Inicializar uma lista para armazenar as porcentagens de estouro por categoria
over_budget_percentages = []

# Iterar sobre cada categoria para calcular a porcentagem de meses em que o orçamento foi excedido
for category, limit in budget.items():
    # Filtrar os dados da categoria atual
    category_data = monthly_expenses[monthly_expenses['category'] == category]
    # Contar o número de meses em que o gasto excedeu o orçamento
    months_over_budget = (category_data['price'] > limit).sum()
    # Calcular o número total de meses registrados para a categoria
    total_months = category_data['month_year'].nunique()
    # Calcular a porcentagem de meses com estouro de orçamento
    percentage_over = (months_over_budget / total_months) * 100 if total_months > 0 else 0
    # Adicionar os resultados à lista
    over_budget_percentages.append({'Categoria': category, 'Percentual de Estouro (%)': round(percentage_over, 2)})

# Criar um DataFrame com os resultados
over_budget_df = pd.DataFrame(over_budget_percentages)

# Exibir a tabela
show(over_budget_df)
```

### Quanto ainda tenho disponível para gastar em cada categoria neste mês?

```{python}
# Filtrar despesas do mês atual
current_month_outcome = df[
    (df['type'] == 'outcome') &
    (df['createdAt'].dt.month == now.month) &
    (df['createdAt'].dt.year == now.year)
]

# Somar gastos por categoria neste mês
spent_by_category = current_month_outcome.groupby('category')['price'].sum()

# Calcular o restante do orçamento
remaining_budget = []

for category, limit in budget.items():
    spent = spent_by_category.get(category, 0)
    remaining = limit - spent
    remaining_budget.append({
        'categoria': category,
        'restou': round(remaining, 2)
    })

# Criar a tabela final
remaining_budget_df = pd.DataFrame(remaining_budget)
show(remaining_budget_df.sort_values(by='restou'))

```
:::

### Qual o meu progresso em relação à minha meta de economia?

```{python}
# Adiciona colunas auxiliares
df['year'] = df['createdAt'].dt.year
df['month'] = df['createdAt'].dt.month

# Mapeia número do mês para nome abreviado em português
month_map = {
    1: 'jan', 2: 'fev', 3: 'mar', 4: 'abr',
    5: 'mai', 6: 'jun', 7: 'jul', 8: 'ago',
    9: 'set', 10: 'out', 11: 'nov', 12: 'dez'
}
df['month_name'] = df['month'].map(month_map)

# Soma os valores de receitas e despesas por mês/ano
income_by_month = df[df['type'] == 'income'].groupby(['year', 'month_name'])['price'].sum()
outcome_by_month = df[df['type'] == 'outcome'].groupby(['year', 'month_name'])['price'].sum()

# Calcula economia
economy_by_month = (income_by_month - outcome_by_month)

# Transforma em tabela (pivot)
economy_table = economy_by_month.reset_index().pivot(index='year', columns='month_name', values='price')

# Ordena colunas dos meses
ordered_months = ['jan', 'fev', 'mar', 'abr', 'mai', 'jun', 'jul', 'ago', 'set', 'out', 'nov', 'dez']
economy_table = economy_table.reindex(columns=ordered_months)

# Substitui NaN por '-'
economy_table = economy_table.applymap(lambda x: f"{x:.2f}" if pd.notnull(x) else '-')


# Exibe a tabela
show(economy_table)
```

### Quanto estou conseguindo economizar em média por mês?

```{python}
# Adiciona colunas auxiliares
df['year'] = df['createdAt'].dt.year
df['month'] = df['createdAt'].dt.month

# Agrupa receitas e despesas por ano e mês
income = df[df['type'] == 'income'].groupby(['year', 'month'])['price'].sum()
outcome = df[df['type'] == 'outcome'].groupby(['year', 'month'])['price'].sum()

# Calcula economia mensal
economy = (income - outcome).reset_index()
economy.columns = ['year', 'month', 'economy']

# Ordena por ano e mês
economy = economy.sort_values(by=['year', 'month'])

# Filtra os últimos 3 meses disponíveis
last_three = economy.tail(3)

# Calcula média
average_saving = last_three['economy'].mean()

display(Markdown(f"Média de economia nos últimos 3 meses: **{average_saving:.2f}**"))
```

### Estou conseguindo seguir meu orçamento nesse mes?

```{python}
# Filtrar o mês atual e tipo=outcome
df_outcome = df[df['type'] == 'outcome'].copy()
df_outcome['createdAt'] = pd.to_datetime(df_outcome['createdAt'], format='%d-%m-%Y')

current_month = df_outcome[
    (df_outcome['createdAt'].dt.month == now.month) &
    (df_outcome['createdAt'].dt.year == now.year)
]
# Somar os gastos nas categorias selecionadas
selected_categories = list(budget.keys())
expense_sum = (
    current_month[current_month['category'].isin(selected_categories)]
    .groupby('category')['price']
    .sum()
    .reindex(selected_categories, fill_value=0)
)

# Preparar dados para o gráfico
labels = selected_categories
budget_values = [budget[cat] for cat in labels]
actual_values = [expense_sum[cat] for cat in labels]

# Fechar o gráfico radar
labels += [labels[0]]
budget_values += [budget_values[0]]
actual_values += [actual_values[0]]

# Ângulos para o radar
angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=True).tolist()

# Criar o radar chart
fig, ax = plt.subplots(figsize=(5, 5), subplot_kw=dict(polar=True))

# Estilo do gráfico
ax.set_theta_offset(np.pi / 2)
ax.set_theta_direction(-1)

# Desenhar os eixos e rótulos
ax.set_xticks(angles[:-1])
ax.set_xticklabels(labels[:-1])
ax.set_rlabel_position(0)

ax.yaxis.grid(False)
# Remove the outer circular spine
ax.spines['polar'].set_visible(False)

plt.yticks([500, 1000, 1500, 2000, 2500, 3000], ["500", "1000", "1500", "2000", "2500", "3000"], color="grey", size=10)
plt.ylim(0, max(budget_values + actual_values) + 500)

# Plotar o orçamento
ax.plot(angles, budget_values, color='#0077b6', linewidth=2, linestyle='solid', label='Orçamento')



ax.fill(angles, budget_values, color='#0077b6', alpha=0.1)

# Plotar os gastos reais
ax.plot(angles, actual_values, color='red', linewidth=2, linestyle='solid', label='Gasto Atual')
ax.fill(angles, actual_values, color='red', alpha=0.2)

# Título e legenda
ax.set_title(f'Controle de Orçamento - {now.strftime("%B/%Y")}', size=8, y=1.1)
ax.legend(loc='best', bbox_to_anchor=(1.1, 1.1))

ax.tick_params(axis='y', labelsize=7)
ax.legend(fontsize=8)

plt.show()

```